# Auto-generated using compose2nix v0.2.3-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  /*
  virtualisation.oci-containers.containers."ollama" = {
    image = "ollama/ollama:latest";
    volumes = [
      "open-webui_ollama:/root/.ollama:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=ollama"
      "--network=open-webui_default"
    ];
  };
  systemd.services."podman-ollama" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-open-webui_default.service"
      "podman-volume-open-webui_ollama.service"
    ];
    requires = [
      "podman-network-open-webui_default.service"
      "podman-volume-open-webui_ollama.service"
    ];
    partOf = [
      "podman-compose-open-webui-root.target"
    ];
    wantedBy = [
      "podman-compose-open-webui-root.target"
    ];
  };
  */
  virtualisation.oci-containers.containers."open-webui" = {
    image = "ghcr.io/open-webui/open-webui:main";
    environment = {
      "OLLAMA_BASE_URL" = "http://localhost:11434";
      "WEBUI_SECRET_KEY" = "";
    };
    volumes = [
      "open-webui_open-webui:/app/backend/data:rw"
    ];
    ports = [
      "3000:8080/tcp"
    ];
    dependsOn = [
      "ollama"
    ];
    log-driver = "journald";
    extraOptions = [
      "--add-host=host.docker.internal:host-gateway"
      "--network-alias=open-webui"
      "--network=open-webui_default"
    ];
  };
  systemd.services."podman-open-webui" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-open-webui_default.service"
      "podman-volume-open-webui_open-webui.service"
    ];
    requires = [
      "podman-network-open-webui_default.service"
      "podman-volume-open-webui_open-webui.service"
    ];
    partOf = [
      "podman-compose-open-webui-root.target"
    ];
    wantedBy = [
      "podman-compose-open-webui-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-open-webui_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f open-webui_default";
    };
    script = ''
      podman network inspect open-webui_default || podman network create open-webui_default
    '';
    partOf = [ "podman-compose-open-webui-root.target" ];
    wantedBy = [ "podman-compose-open-webui-root.target" ];
  };

  # Volumes
  systemd.services."podman-volume-open-webui_ollama" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect open-webui_ollama || podman volume create open-webui_ollama
    '';
    partOf = [ "podman-compose-open-webui-root.target" ];
    wantedBy = [ "podman-compose-open-webui-root.target" ];
  };
  systemd.services."podman-volume-open-webui_open-webui" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect open-webui_open-webui || podman volume create open-webui_open-webui
    '';
    partOf = [ "podman-compose-open-webui-root.target" ];
    wantedBy = [ "podman-compose-open-webui-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-open-webui-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
